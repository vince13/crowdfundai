# Generated by Django 5.1.5 on 2025-01-27 05:02

import core.models.mixins
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-separated keywords for SEO', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('identifier', models.CharField(max_length=100)),
                ('config', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('is_default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('INVESTMENT', 'Investment Update'), ('PRICE', 'Price Alert'), ('SYSTEM', 'System Notification'), ('MILESTONE', 'Portfolio Milestone'), ('APP_UPDATE', 'App Update'), ('FUNDING_GOAL', 'Funding Goal Reached'), ('DIVIDEND', 'Dividend Payment'), ('SECURITY', 'Security Alert'), ('MAINTENANCE', 'System Maintenance'), ('NEWS', 'App News'), ('APP_APPROVAL', 'App Approval Status'), ('PAYMENT_PENDING', 'Payment Processing'), ('FUNDING_COMPLETE', 'Funding Complete')], max_length=20)),
                ('title_template', models.CharField(max_length=255)),
                ('message_template', models.TextField()),
                ('link_template', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('project_type', models.CharField(choices=[('web', 'Web Solution'), ('mobile', 'Mobile App'), ('ai', 'AI/ML Solution'), ('blockchain', 'Blockchain'), ('datacenter', 'Data Center'), ('autonomous', 'Autonomous'), ('defence', 'Defence'), ('other', 'Other')], max_length=20)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('NEW', 'New'), ('IN_REVIEW', 'In Review'), ('CONTACTED', 'Contacted'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected')], default='NEW', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('DEVELOPER', 'Developer'), ('INVESTOR', 'Investor')], default='INVESTOR', max_length=10)),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('deletion_reason', models.TextField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_login_user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            bases=(models.Model, core.models.mixins.UserSecurityMixin, core.models.mixins.TwoFactorMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(help_text='HTML content for the advertisement')),
                ('image', models.ImageField(blank=True, help_text='Advertisement image (recommended size: 800x400px for main, 400x400px for sidebar)', null=True, upload_to='ads/')),
                ('position', models.CharField(choices=[('main', 'Main Content'), ('sidebar', 'Sidebar')], max_length=20)),
                ('target_url', models.URLField()),
                ('company_name', models.CharField(max_length=200)),
                ('contact_email', models.EmailField(max_length=254)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PAID', 'Paid'), ('ACTIVE', 'Active'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_status', models.CharField(choices=[('UNPAID', 'Unpaid'), ('PROCESSING', 'Processing'), ('PAID', 'Paid'), ('FAILED', 'Failed')], default='UNPAID', max_length=20)),
                ('payment_id', models.CharField(blank=True, max_length=255, null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Notes from admin review')),
                ('rejection_reason', models.TextField(blank=True)),
                ('total_clicks', models.PositiveIntegerField(default=0, help_text='Total clicks from all users')),
                ('unique_authenticated_clicks', models.PositiveIntegerField(default=0, help_text='Unique clicks from authenticated users')),
                ('anonymous_clicks', models.PositiveIntegerField(default=0, help_text='Clicks from anonymous users')),
                ('impressions', models.PositiveIntegerField(default=0)),
                ('last_clicked', models.DateTimeField(blank=True, null=True)),
                ('advertiser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advertisements', to=settings.AUTH_USER_MODEL)),
                ('clicked_by', models.ManyToManyField(blank=True, help_text='Authenticated users who have clicked this ad', related_name='clicked_ads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('advertisement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='click_records', to='core.advertisement')),
            ],
            options={
                'ordering': ['-clicked_at'],
            },
        ),
        migrations.CreateModel(
            name='APIRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=255)),
                ('method', models.CharField(max_length=10)),
                ('response_time', models.FloatField()),
                ('status_code', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'API Request',
                'verbose_name_plural': 'API Requests',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='APIError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(max_length=100)),
                ('error_message', models.TextField()),
                ('stack_trace', models.TextField(null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.apirequest')),
            ],
            options={
                'verbose_name': 'API Error',
                'verbose_name_plural': 'API Errors',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AppListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('ai_features', models.TextField()),
                ('demo_video', models.URLField(blank=True, help_text='Link to app demonstration video')),
                ('category', models.CharField(choices=[('ROBOTICS', 'Robotics'), ('HEALTHCARE', 'Healthcare'), ('FINTECH', 'Financial Technology'), ('EDTECH', 'Educational Technology'), ('GAMING', 'Gaming'), ('SECURITY', 'Security'), ('PRODUCTIVITY', 'Productivity'), ('SOCIAL', 'Social'), ('ECOMMERCE', 'E-commerce'), ('CAREER', 'Career'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('listing_type', models.CharField(choices=[('LISTED', 'Listed'), ('NOMINATED', 'Nominated'), ('COMMUNITY', 'Community Suggested')], default='LISTED', help_text='Whether this is a listed app by developer or a community nominated app', max_length=20)),
                ('nomination_details', models.TextField(blank=True, help_text='Detailed description of the nominated app idea and its potential impact')),
                ('nomination_votes', models.PositiveIntegerField(default=0, help_text='Number of community votes/support for this nominated app')),
                ('nomination_budget_breakdown', models.JSONField(blank=True, default=dict, help_text='Detailed breakdown of estimated development costs for nominated apps')),
                ('nomination_timeline', models.JSONField(blank=True, default=dict, help_text='Estimated development timeline and milestones for nominated apps')),
                ('nomination_date', models.DateTimeField(blank=True, help_text='When this app was nominated', null=True)),
                ('development_stage', models.CharField(choices=[('CONCEPT', 'Concept'), ('PROTOTYPE', 'Prototype'), ('MVP', 'Minimum Viable Product'), ('BETA', 'Beta'), ('PRODUCTION', 'Production'), ('NOMINATED', 'Nominated')], default='CONCEPT', max_length=20)),
                ('project_status', models.CharField(choices=[('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('FUNDED', 'Funded'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected'), ('IN_DEVELOPMENT', 'In Development'), ('BETA', 'Beta Testing'), ('LAUNCHED', 'Launched'), ('ON_HOLD', 'On Hold')], default='PENDING', max_length=20)),
                ('progress', models.IntegerField(default=0, help_text='Overall project progress (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('estimated_completion_date', models.DateField(blank=True, help_text='Estimated project completion date', null=True)),
                ('last_update', models.DateTimeField(auto_now=True, help_text='Last project update timestamp')),
                ('funding_goal', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('fixed_valuation', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed company valuation at the start of the funding round', max_digits=15, null=True)),
                ('currency', models.CharField(choices=[('NGN', 'Nigerian Naira')], default='NGN', max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=4, help_text='Exchange rate for currency conversion', max_digits=10)),
                ('available_percentage', models.DecimalField(decimal_places=2, help_text='Total percentage of equity available for funding', max_digits=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('min_investment_percentage', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Minimum percentage that can be purchased (e.g., 1%)', max_digits=5, validators=[django.core.validators.MinValueValidator(1)])),
                ('remaining_percentage', models.DecimalField(decimal_places=2, help_text='Percentage of equity still available', max_digits=5)),
                ('price_per_percentage', models.DecimalField(decimal_places=2, help_text='Price for 1% equity', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('equity_percentage', models.DecimalField(decimal_places=2, help_text="Total percentage of company equity (not just what's offered for funding)", max_digits=5)),
                ('lock_in_period', models.IntegerField(default=180, help_text='Period (in days) before shares can be resold')),
                ('funding_round', models.CharField(choices=[('PRESEED', 'Pre-seed'), ('SEED', 'Seed'), ('SERIES_A', 'Series A'), ('SERIES_B', 'Series B'), ('SERIES_C', 'Series C')], default='PRESEED', max_length=20)),
                ('round_number', models.PositiveIntegerField(default=1, help_text='Sequential number of the funding round')),
                ('use_of_funds', models.JSONField(default=dict, help_text="Breakdown of how funds will be used (e.g., {'marketing': 30, 'development': 50, 'operations': 20})")),
                ('funds_in_escrow', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total funds currently held in escrow', max_digits=10)),
                ('escrow_status', models.CharField(choices=[('COLLECTING', 'Collecting Funds'), ('RELEASED', 'Funds Released'), ('REFUNDED', 'Funds Refunded')], default='COLLECTING', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('FUNDED', 'Funded'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected'), ('IN_DEVELOPMENT', 'In Development'), ('BETA', 'Beta Testing'), ('LAUNCHED', 'Launched'), ('ON_HOLD', 'On Hold')], default='PENDING', max_length=20)),
                ('github_url', models.URLField(blank=True)),
                ('demo_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('funding_end_date', models.DateTimeField(help_text='Date when funding round ends')),
                ('suggestion_date', models.DateTimeField(blank=True, help_text='When this app was suggested by community', null=True)),
                ('community_likes', models.PositiveIntegerField(default=0, help_text='Number of community likes for this suggested app')),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('nominated_by', models.ForeignKey(blank=True, help_text='Admin who nominated this app', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nominated_apps', to=settings.AUTH_USER_MODEL)),
                ('suggested_by', models.ForeignKey(blank=True, help_text='Community member who suggested this app', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suggested_apps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AppInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('VALUATION', 'Valuation'), ('RISK', 'Risk Assessment'), ('GROWTH', 'Growth Potential'), ('MARKET', 'Market Analysis')], max_length=20)),
                ('value', models.FloatField()),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='core.applisting')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AppComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_private', models.BooleanField(default=False, help_text='If True, only visible to the developer and commenter')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.appcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='app_comments', to=settings.AUTH_USER_MODEL)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.applisting')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('technical_analysis', models.JSONField(blank=True, help_text='AI-extracted technical details including tech stack and AI features', null=True)),
                ('market_analysis', models.JSONField(blank=True, help_text='AI-extracted market insights including target market and competition', null=True)),
                ('team_analysis', models.JSONField(blank=True, help_text='AI-extracted team assessment and experience', null=True)),
                ('financial_analysis', models.JSONField(blank=True, help_text='AI-extracted financial metrics and projections', null=True)),
                ('risk_analysis', models.JSONField(blank=True, help_text='AI-identified risks and opportunities', null=True)),
                ('innovation_score', models.FloatField(blank=True, help_text='AI-calculated innovation score (0-100)', null=True)),
                ('market_potential_score', models.FloatField(blank=True, help_text='AI-calculated market potential score (0-100)', null=True)),
                ('execution_capability_score', models.FloatField(blank=True, help_text='AI-calculated execution capability score (0-100)', null=True)),
                ('overall_score', models.FloatField(blank=True, help_text='AI-calculated overall assessment score (0-100)', null=True)),
                ('ai_insights', models.TextField(blank=True, help_text='Additional AI-generated insights and recommendations', null=True)),
                ('app', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_assessment', to='core.applisting')),
            ],
        ),
        migrations.AddField(
            model_name='advertisement',
            name='app',
            field=models.ForeignKey(blank=True, help_text='Associated app if this is an app promotion', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advertisements', to='core.applisting'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('AUTH', 'Authentication'), ('ACCESS', 'Resource Access'), ('MODIFY', 'Data Modification'), ('DELETE', 'Data Deletion'), ('ADMIN', 'Admin Action'), ('SECURITY', 'Security Event')], max_length=20)),
                ('user_id', models.CharField(max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('endpoint', models.CharField(max_length=255)),
                ('method', models.CharField(max_length=10)),
                ('request_data', models.JSONField(null=True)),
                ('response_status', models.IntegerField()),
                ('user_agent', models.TextField()),
                ('session_id', models.CharField(max_length=100, null=True)),
                ('additional_data', models.JSONField(null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['timestamp', 'event_type'], name='core_auditl_timesta_103016_idx'), models.Index(fields=['user_id', 'event_type'], name='core_auditl_user_id_bdb095_idx'), models.Index(fields=['endpoint', 'method'], name='core_auditl_endpoin_c26d10_idx')],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('content', models.TextField()),
                ('source_url', models.URLField(blank=True, help_text='URL of the source article (optional)')),
                ('target_word_count', models.PositiveIntegerField(default=500, help_text='Target word count for AI-generated content')),
                ('is_ai_generated', models.BooleanField(default=False)),
                ('featured_image', models.ImageField(blank=True, upload_to='blog/images/%Y/%m/')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),
                ('meta_title', models.CharField(blank=True, help_text='Max 60 characters for SEO', max_length=60)),
                ('meta_description', models.CharField(blank=True, help_text='Max 160 characters for SEO', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-separated keywords for SEO', max_length=255)),
                ('social_title', models.CharField(blank=True, help_text='Title for social media sharing', max_length=100)),
                ('social_description', models.CharField(blank=True, help_text='Description for social media sharing', max_length=200)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('read_time', models.PositiveIntegerField(default=5, help_text='Estimated reading time in minutes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.blogcategory')),
            ],
            options={
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('rule_type', models.CharField(choices=[('investment', 'Investment Rules'), ('app_submission', 'App Submission Rules'), ('user', 'User Rules'), ('moderation', 'Moderation Rules')], max_length=20)),
                ('value', models.JSONField()),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['rule_type', 'name'],
                'indexes': [models.Index(fields=['rule_type', 'is_active'], name='core_busine_rule_ty_f2646b_idx'), models.Index(fields=['name', 'is_active'], name='core_busine_name_95023b_idx')],
                'unique_together': {('rule_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CommunityVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('UPVOTE', 'Upvote'), ('LIKE', 'Like')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_votes', to='core.applisting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='app_votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContentModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('FLAGGED', 'Flagged for Review')], default='PENDING', max_length=20)),
                ('moderation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_content', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeveloperPaymentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('paystack', 'Paystack')], default='bank_transfer', max_length=50)),
                ('account_details', models.JSONField(help_text='Encrypted account details in JSON format')),
                ('verified', models.BooleanField(default=False)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('under_review', 'Under Review'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('verification_notes', models.TextField(blank=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('developer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_info', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payment_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Developer Payment Information',
                'verbose_name_plural': 'Developer Payment Information',
            },
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispute_type', models.CharField(choices=[('PAYMENT', 'Payment Issue'), ('MILESTONE', 'Milestone Dispute'), ('QUALITY', 'Quality Issue'), ('OTHER', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('IN_REVIEW', 'Under Review'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('ESCALATED', 'Escalated')], default='PENDING', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('amount_in_dispute', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution', models.TextField(blank=True)),
                ('resolution_type', models.CharField(blank=True, max_length=50)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disputes_assigned', to=settings.AUTH_USER_MODEL)),
                ('raised_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='disputes_raised', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disputes_resolved', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DisputeComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_internal', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('dispute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.dispute')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DisputeEvidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='dispute_evidence/%Y/%m/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('dispute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evidence', to='core.dispute')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FundingRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_type', models.CharField(choices=[('PRESEED', 'Pre-seed'), ('SEED', 'Seed'), ('SERIES_A', 'Series A'), ('SERIES_B', 'Series B'), ('SERIES_C', 'Series C')], max_length=20)),
                ('round_number', models.PositiveIntegerField()),
                ('funding_goal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(choices=[('NGN', 'Nigerian Naira')], max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=4, help_text='Exchange rate at the time of round creation', max_digits=10)),
                ('share_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_shares', models.IntegerField()),
                ('equity_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100.0)])),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('use_of_funds', models.JSONField(default=dict, help_text='Breakdown of how funds will be used')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REJECTED', 'Rejected by Admin')], default='PENDING', max_length=20)),
                ('admin_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_bought', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_id', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_owned', models.DecimalField(decimal_places=2, help_text='Percentage ownership in the app', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(100.0)])),
                ('transaction_hash', models.CharField(help_text='Unique transaction identifier', max_length=255, unique=True)),
                ('amount_invested', models.DecimalField(decimal_places=2, help_text='Amount invested in USD', max_digits=10)),
                ('issue_date', models.DateTimeField(auto_now_add=True)),
                ('pdf_certificate', models.FileField(blank=True, null=True, upload_to='certificates/%Y/%m/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this certificate is currently valid')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='certificates', to='core.applisting')),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='certificates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Investment Certificate',
                'verbose_name_plural': 'Investment Certificates',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='LegalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('TOS', 'Terms of Service'), ('PRIVACY', 'Privacy Policy'), ('USER_AGREEMENT', 'User Agreement'), ('SHARE_TRANSFER', 'Share Transfer Agreement'), ('INVESTMENT', 'Investment Agreement')], max_length=20)),
                ('version', models.CharField(max_length=10)),
                ('content', models.TextField()),
                ('effective_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('change_summary', models.TextField(blank=True)),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next_version', to='core.legaldocument')),
            ],
            options={
                'ordering': ['-effective_date'],
            },
        ),
        migrations.CreateModel(
            name='ModerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('action', models.CharField(choices=[('REVIEW', 'Content Review'), ('APPROVE', 'Content Approval'), ('REJECT', 'Content Rejection'), ('FLAG', 'Content Flagging'), ('UPDATE', 'Status Update')], max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('INVESTMENT', 'Investment Update'), ('PRICE', 'Price Alert'), ('SYSTEM', 'System Notification'), ('MILESTONE', 'Portfolio Milestone'), ('APP_UPDATE', 'App Update'), ('FUNDING_GOAL', 'Funding Goal Reached'), ('DIVIDEND', 'Dividend Payment'), ('SECURITY', 'Security Alert'), ('MAINTENANCE', 'System Maintenance'), ('NEWS', 'App News'), ('APP_APPROVAL', 'App Approval Status'), ('PAYMENT_PENDING', 'Payment Processing'), ('FUNDING_COMPLETE', 'Funding Complete')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('link', models.CharField(blank=True, max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivered_at', models.DateTimeField(null=True)),
                ('read_at', models.DateTimeField(null=True)),
                ('clicked_at', models.DateTimeField(null=True)),
                ('device_info', models.JSONField(default=dict)),
                ('notification', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.notification')),
            ],
            options={
                'verbose_name_plural': 'Notification Analytics',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_muted', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.notificationgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('investment_notifications', models.BooleanField(default=True)),
                ('price_alerts', models.BooleanField(default=True)),
                ('system_notifications', models.BooleanField(default=True)),
                ('milestone_notifications', models.BooleanField(default=True)),
                ('app_update_notifications', models.BooleanField(default=True)),
                ('funding_goal_notifications', models.BooleanField(default=True)),
                ('dividend_notifications', models.BooleanField(default=True)),
                ('security_notifications', models.BooleanField(default=True)),
                ('maintenance_notifications', models.BooleanField(default=True)),
                ('news_notifications', models.BooleanField(default=True)),
                ('app_approval_notifications', models.BooleanField(default=True)),
                ('price_alert_threshold', models.DecimalField(decimal_places=2, default=5.0, help_text='Percentage change to trigger price alerts', max_digits=5)),
                ('quiet_hours_start', models.TimeField(blank=True, null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, null=True)),
                ('notification_frequency', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('HOURLY', 'Hourly Digest'), ('DAILY', 'Daily Digest'), ('WEEKLY', 'Weekly Digest')], default='IMMEDIATE', max_length=20)),
                ('minimum_investment_alert', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Preference',
                'verbose_name_plural': 'Notification Preferences',
            },
        ),
        migrations.CreateModel(
            name='PitchDeck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presentation_file', models.FileField(blank=True, help_text='Upload your pitch deck (PDF only)', null=True, upload_to='pitch_decks/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'], message='Only PDF files are allowed.')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('app', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pitch_deck', to='core.applisting')),
            ],
        ),
        migrations.CreateModel(
            name='PlatformFeeTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(null=True)),
                ('transaction_reference', models.CharField(blank=True, max_length=255)),
                ('payment_gateway', models.CharField(choices=[('PAYSTACK', 'Paystack')], default='PAYSTACK', max_length=20)),
                ('gateway_response', models.JSONField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('DELAYED', 'Delayed'), ('CANCELLED', 'Cancelled'), ('VERIFICATION_REQUESTED', 'Verification Requested'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected')], default='PENDING', max_length=50)),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('release_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('verification_notes', models.TextField(blank=True)),
                ('verification_requested_at', models.DateTimeField(blank=True, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.applisting')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_milestones', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EscrowTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('DEPOSIT', 'Deposit to Escrow'), ('RELEASE', 'Release to Developer'), ('REFUND', 'Refund to Investor'), ('PARTIAL_REFUND', 'Partial Refund'), ('MILESTONE_RELEASE', 'Milestone Release'), ('DISPUTE_HOLD', 'Dispute Hold')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(choices=[('NGN', 'Nigerian Naira')], max_length=3)),
                ('payment_gateway', models.CharField(choices=[('PAYSTACK', 'Paystack')], max_length=20)),
                ('gateway_reference', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded'), ('PARTIALLY_REFUNDED', 'Partially Refunded'), ('DISPUTED', 'Disputed')], default='PENDING', max_length=20)),
                ('dispute_status', models.CharField(choices=[('NO_DISPUTE', 'No Dispute'), ('PENDING', 'Dispute Pending'), ('RESOLVED_RELEASE', 'Release'), ('RESOLVED_REFUND', 'Refund')], default='NO_DISPUTE', max_length=20)),
                ('dispute_reason', models.TextField(blank=True)),
                ('dispute_resolution_notes', models.TextField(blank=True)),
                ('refund_reason', models.TextField(blank=True)),
                ('release_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of total amount to release', max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
                ('dispute_resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_disputes', to=settings.AUTH_USER_MODEL)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('original_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='refunds', to='core.escrowtransaction')),
                ('milestone', models.ForeignKey(blank=True, help_text='Associated milestone for release', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.projectmilestone')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EscrowRelease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escrow_releases', to='core.applisting')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_releases', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_releases', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escrow_releases', to='core.projectmilestone')),
            ],
        ),
        migrations.CreateModel(
            name='Deliverable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('TODO', 'To Do'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('BLOCKED', 'Blocked')], default='TODO', max_length=20)),
                ('due_date', models.DateField()),
                ('evidence_file', models.FileField(blank=True, help_text='Upload evidence files (e.g. documents, screenshots, videos)', null=True, upload_to='deliverables/evidence/%Y/%m/')),
                ('evidence_link', models.URLField(blank=True, help_text='External link to evidence (e.g. GitHub repo, demo video)', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliverables', to='core.projectmilestone')),
            ],
        ),
        migrations.CreateModel(
            name='AppTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='core.applisting')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apps', to='core.projecttag')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('update_type', models.CharField(choices=[('GENERAL', 'General'), ('MILESTONE', 'Milestone'), ('TECHNICAL', 'Technical'), ('BUSINESS', 'Business'), ('TEAM', 'Team')], default='GENERAL', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='core.applisting')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updates', to='core.projectmilestone')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('reason', models.CharField(choices=[('INAPPROPRIATE', 'Inappropriate Content'), ('SPAM', 'Spam'), ('MISLEADING', 'Misleading Information'), ('FRAUD', 'Fraudulent Activity'), ('OTHER', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Report Approved'), ('REJECTED', 'Report Rejected'), ('RESOLVED', 'Issue Resolved')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderation_notes', models.TextField(blank=True)),
                ('moderated_at', models.DateTimeField(null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_moderated', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_submitted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Revenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(choices=[('NGN', 'Nigerian Naira')], default='NGN', max_length=3)),
                ('source', models.CharField(choices=[('SUBSCRIPTION', 'Subscription'), ('ONE_TIME', 'One-time Purchase'), ('IN_APP', 'In-app Purchase'), ('API_USAGE', 'API Usage'), ('CONSULTING', 'Consulting Services'), ('SUPPORT', 'Support Services'), ('OTHER', 'Other')], default='ONE_TIME', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('is_distributed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_count', models.PositiveIntegerField(default=1, help_text='Number of customers contributing to this revenue')),
                ('recurring_interval', models.CharField(choices=[('NONE', 'Non-recurring'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUALLY', 'Annually')], default='NONE', max_length=20)),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this revenue is part of a recurring series')),
                ('metadata', models.JSONField(default=dict, help_text='Additional revenue metadata (e.g., platform, region, etc.)')),
                ('exchange_rate', models.DecimalField(decimal_places=4, help_text='Exchange rate at the time of revenue recording', max_digits=10, null=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revenues', to='core.applisting')),
                ('parent_revenue', models.ForeignKey(blank=True, help_text='Parent revenue for recurring series', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.revenue')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('share_percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('distributed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255)),
                ('error_message', models.TextField(blank=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('revenue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributions', to='core.revenue')),
            ],
            options={
                'ordering': ['-distributed_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('warning', 'Warning')], max_length=20)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Audit Log',
                'verbose_name_plural': 'Security Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ShareOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_owned', models.DecimalField(decimal_places=2, max_digits=5)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShareTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_amount', models.DecimalField(decimal_places=2, help_text='Percentage amount being transferred', max_digits=5)),
                ('price_per_percentage', models.DecimalField(decimal_places=2, help_text='Price per percentage point', max_digits=10)),
                ('currency', models.CharField(choices=[('NGN', 'Nigerian Naira')], default='NGN', max_length=3)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total transaction amount (percentage_amount * price_per_percentage)', max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
                ('buyer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='share_purchases', to=settings.AUTH_USER_MODEL)),
                ('escrow_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.escrowtransaction')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='share_sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_type', models.CharField(choices=[('INVESTMENT', 'Investment'), ('REVENUE', 'Revenue')], max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.applisting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('request_notes', models.TextField(blank=True)),
                ('approval_requested_at', models.DateTimeField(blank=True, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('approval_notes', models.TextField(blank=True)),
                ('rejected_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('processed_date', models.DateTimeField(blank=True, null=True)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('failure_reason', models.TextField(blank=True)),
                ('approval_requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approval_requests_initiated', to=settings.AUTH_USER_MODEL)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases_approved', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='releases', to='core.projectmilestone')),
                ('rejected_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='releases_rejected', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='releases_requested', to=settings.AUTH_USER_MODEL)),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='releases', to='core.transaction')),
            ],
            options={
                'ordering': ['-request_date'],
                'permissions': [('can_approve_release', 'Can approve fund releases'), ('can_process_release', 'Can process fund releases')],
            },
        ),
        migrations.AddField(
            model_name='dispute',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='disputes', to='core.transaction'),
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='activity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Activities',
            },
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.legaldocument')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-accepted_at'],
            },
        ),
        migrations.CreateModel(
            name='ShareTransferAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('legal_document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.legaldocument')),
                ('transfer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.sharetransfer')),
                ('buyer_agreement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='share_transfers_as_buyer', to='core.useragreement')),
                ('seller_agreement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='share_transfers_as_seller', to='core.useragreement')),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('investment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.investment')),
                ('legal_document', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.legaldocument')),
                ('investor_agreement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='investment_agreements', to='core.useragreement')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.notificationchannel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('bank_statement', 'Bank Statement'), ('void_check', 'Void Check'), ('id_proof', 'ID Proof')], max_length=50)),
                ('file', models.FileField(upload_to='verification_documents/%Y/%m/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('payment_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_documents', to='core.developerpaymentinfo')),
            ],
        ),
        migrations.AddIndex(
            model_name='applisting',
            index=models.Index(fields=['status', 'created_at'], name='core_applis_status_be4ad5_idx'),
        ),
        migrations.AddIndex(
            model_name='applisting',
            index=models.Index(fields=['developer', 'status'], name='core_applis_develop_fae859_idx'),
        ),
        migrations.AddIndex(
            model_name='applisting',
            index=models.Index(fields=['currency', 'status'], name='core_applis_currenc_de3899_idx'),
        ),
        migrations.AddIndex(
            model_name='appcomment',
            index=models.Index(fields=['app', 'created_at'], name='core_appcom_app_id_76024f_idx'),
        ),
        migrations.AddIndex(
            model_name='appcomment',
            index=models.Index(fields=['user', 'created_at'], name='core_appcom_user_id_8626f2_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['-published_at', '-created_at'], name='core_blog_publish_0285ac_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['status', '-published_at'], name='core_blog_status_f116d9_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['author', '-published_at'], name='core_blog_author__9d48d0_idx'),
        ),
        migrations.AddIndex(
            model_name='communityvote',
            index=models.Index(fields=['app', 'vote_type'], name='core_commun_app_id_42849b_idx'),
        ),
        migrations.AddIndex(
            model_name='communityvote',
            index=models.Index(fields=['user', 'vote_type'], name='core_commun_user_id_aa3b83_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='communityvote',
            unique_together={('app', 'user', 'vote_type')},
        ),
        migrations.AlterUniqueTogether(
            name='contentmoderation',
            unique_together={('content_type', 'object_id')},
        ),
        migrations.AddIndex(
            model_name='fundinground',
            index=models.Index(fields=['app', 'status'], name='core_fundin_app_id_ee9275_idx'),
        ),
        migrations.AddIndex(
            model_name='fundinground',
            index=models.Index(fields=['round_type', 'status'], name='core_fundin_round_t_2c8c97_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fundinground',
            unique_together={('app', 'round_number')},
        ),
        migrations.AlterUniqueTogether(
            name='legaldocument',
            unique_together={('document_type', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='notificationgroupmembership',
            unique_together={('user', 'group')},
        ),
        migrations.AddIndex(
            model_name='platformfeetransaction',
            index=models.Index(fields=['app', 'status'], name='core_platfo_app_id_091dbd_idx'),
        ),
        migrations.AddIndex(
            model_name='platformfeetransaction',
            index=models.Index(fields=['created_at'], name='core_platfo_created_64897b_idx'),
        ),
        migrations.AddIndex(
            model_name='escrowtransaction',
            index=models.Index(fields=['app', 'transaction_type', 'status'], name='core_escrow_app_id_d5d69e_idx'),
        ),
        migrations.AddIndex(
            model_name='escrowtransaction',
            index=models.Index(fields=['investor', 'transaction_type'], name='core_escrow_investo_c2b0c4_idx'),
        ),
        migrations.AddIndex(
            model_name='escrowtransaction',
            index=models.Index(fields=['created_at'], name='core_escrow_created_424408_idx'),
        ),
        migrations.AddIndex(
            model_name='escrowtransaction',
            index=models.Index(fields=['dispute_status'], name='core_escrow_dispute_745d44_idx'),
        ),
        migrations.AddIndex(
            model_name='escrowtransaction',
            index=models.Index(fields=['milestone', 'transaction_type'], name='core_escrow_milesto_bfceb3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='apptag',
            unique_together={('app', 'tag')},
        ),
        migrations.AddIndex(
            model_name='revenue',
            index=models.Index(fields=['app', 'created_at'], name='rev_app_date_idx'),
        ),
        migrations.AddIndex(
            model_name='revenue',
            index=models.Index(fields=['is_distributed'], name='rev_dist_idx'),
        ),
        migrations.AddIndex(
            model_name='revenue',
            index=models.Index(fields=['currency', 'created_at'], name='rev_curr_date_idx'),
        ),
        migrations.AddIndex(
            model_name='revenue',
            index=models.Index(fields=['is_recurring', 'recurring_interval'], name='rev_recur_idx'),
        ),
        migrations.AddIndex(
            model_name='revenue',
            index=models.Index(fields=['source', 'created_at'], name='rev_src_date_idx'),
        ),
        migrations.AddIndex(
            model_name='distribution',
            index=models.Index(fields=['status', 'distributed_at'], name='dist_stat_date_idx'),
        ),
        migrations.AddIndex(
            model_name='distribution',
            index=models.Index(fields=['recipient', 'status'], name='dist_recp_stat_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['user', '-timestamp'], name='core_securi_user_id_048e82_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['action', 'status'], name='core_securi_action_9c59fc_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['-timestamp'], name='core_securi_timesta_e1e4f8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shareownership',
            unique_together={('user', 'app')},
        ),
        migrations.AddIndex(
            model_name='sharetransfer',
            index=models.Index(fields=['app', 'status'], name='core_sharet_app_id_4a1cae_idx'),
        ),
        migrations.AddIndex(
            model_name='sharetransfer',
            index=models.Index(fields=['seller', 'status'], name='core_sharet_seller__fdf061_idx'),
        ),
        migrations.AddIndex(
            model_name='sharetransfer',
            index=models.Index(fields=['buyer', 'status'], name='core_sharet_buyer_i_fbe32b_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['status'], name='core_releas_status_9d8f52_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['request_date'], name='core_releas_request_3e16c5_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['approval_requested_at'], name='core_releas_approva_4c4d1e_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['status'], name='core_disput_status_ef9611_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['dispute_type'], name='core_disput_dispute_89adf6_idx'),
        ),
        migrations.AddIndex(
            model_name='dispute',
            index=models.Index(fields=['created_at'], name='core_disput_created_bce46a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='useragreement',
            unique_together={('user', 'document')},
        ),
    ]
