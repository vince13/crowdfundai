from channels.generic.websocket import AsyncJsonWebsocketConsumer; from channels.db import database_sync_to_async; import asyncio; import json; class MarketDataConsumer(AsyncJsonWebsocketConsumer): async def connect(self): await self.accept(); await self.channel_layer.group_add("market_data", self.channel_name); self.send_updates_task = asyncio.create_task(self.send_updates_periodically()); async def disconnect(self, close_code): await self.channel_layer.group_discard("market_data", self.channel_name); if hasattr(self, "send_updates_task"): self.send_updates_task.cancel(); async def receive_json(self, content): command = content.get("command"); if command == "get_market_data": await self.send_market_data(); async def market_data_update(self, event): await self.send_json(event["data"]); @database_sync_to_async; def get_market_data(self): return {"type": "market_data", "data": {"timestamp": "2024-01-20T15:00:00Z", "exchange_rates": {"USD_NGN": 1200.00, "NGN_USD": 0.00083}, "market_status": "open", "last_update": "2024-01-20T15:00:00Z"}}; async def send_market_data(self): data = await self.get_market_data(); await self.send_json(data); async def send_updates_periodically(self): while True: try: await self.send_market_data(); await asyncio.sleep(60); except asyncio.CancelledError: break; except Exception as e: print(f"Error sending market data: {e}"); await asyncio.sleep(60)
